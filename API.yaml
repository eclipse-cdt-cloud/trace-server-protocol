###############################################################################
# Copyright (c) 2018 Ericsson
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################
openapi: '3.0.2'
info:
  description: Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
  version: 0.0.0
  title: Trace Analysis Server Protocol
  termsOfService: http://tracecompass.org/
  contact:
    email: tracecompass-dev@eclipse.org
  license:
    name: Apache 2
    url: http://www.apache.org/licenses/
servers:
  - url: 'https://localhost:8080/tsp/api'
tags:
- name: Traces
  description: How to manage physical traces on your server.
- name: Experiments
  description: How to manage experiments on your server, an experiment represent a collection of traces, which can produce output models.
- name: Bookmarks
  description: How to bookmark areas of interest in the trace.
- name: XY
  description: Learn about querying XY models
- name: TimeGraph
  description: Learn about querying Time Graph models.
- name: Virtual Tables
  description: Learn about querying virtual table models (e.g. Events Table).
- name: Style
  description: Retreive styles for different outputs
- name: Filters
  description: How to filter and query
- name: Features
  description: Discover the features which are available on a given server.
paths:
  /traces:
    get:
      tags:
      - Traces
      summary: Get the list of physical traces imported on the server.
      operationId: getTraces
      responses:
        200:
          description: Returns a list of traces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TraceModel'
    post:
      tags:
      - Traces
      summary: Import a trace
      description: Import a trace to the trace server.
        Return some base information once imported.
      operationId: addTrace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                URI:
                  description: URI of the trace, not necessary if the trace is uploaded via the endpoint
                  type: string
                name:
                  description: The name of the trace in the server, to override the default name
                  type: string
                typeID:
                  description: The trace type's id, to force the use of a parser / disambiguate the trace type.
                  type: string
              required:
                - URI
      responses:
        200:
          description: The trace has been successfully added to the trace server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceModel'
        404:
          description: "No trace available at path"
        406:
          description: "Not acceptable: cannot read this trace type"
        409:
          description: "Conflict: there was already a trace with this name"
  /traces/{traceUUID}:
    delete:
      tags:
      - Traces
      summary: Remove a trace from the server. By default it does not delete the trace from disk.
      operationId: removeTrace
      parameters:
      - name: traceUUID
        in: path
        description: The unique identifier of the trace in the server
        required: true
        schema:
          type: integer
          format: int128
      - name: deleteTrace
        in: query
        description: Indicate if the trace should be deleted from disk or not (false by default)
        required: false
        schema:
          type: boolean
          default: false
      - name: removeCache
        in: query
        description: Indicate if the cache or supplementary files should be removed (false by default).
          If deleteTrace=true, this parameter will also be true.
        required: false
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: The trace was successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceModel'
        204:
          description: There was no trace with this name to close / delete
  /experiments:
    get:
      tags:
      - Experiments
      summary: Get the list of experiments on the server
      operationId: getExperiments
      responses:
        200:
          description: Returns a list of experiments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Experiment'
    post:
      summary: Create a new experiment on the server
      operationId: postExperiment
      tags:
      - Experiments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name to give this experiment
                  type: string
                traces:
                  description: The unique identifiers of the traces to encapsulate in this experiment
                  type: array
                  items:
                    type: integer
                    format: int128
              required:
                - name
                - traces
      responses:
        200:
          description: The Experiment was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
  /experiments/{expUUID}:
    get:
      summary: Get the Model object for an experiment
      operationId: getExperiment
      tags:
      - Experiments
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to modify
        required: true
        schema:
          type : integer
          format: int128
      responses:
        200:
          description: Return the experiment model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
        400:
          description: No such experiment
    put:
      summary: Update an experiment's content and name.
      operationId: putExperiment
      tags:
      - Experiments
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to modify
        required: true
        schema:
          type : integer
          format: int128
      - name: name
        in: query
        description: The name to give this experiment
        required: true
        schema:
          type: string
      requestBody:
        description: Additional information to update an experiment
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                expTypeID:
                  description: Type ID to apply to this experiment
                  type: string
                traces:
                  description: Traces to modify in this experiment
                  type: array
                  items:
                    type: object
                    properties:
                      traceUUID:
                        description: The unique identifier of the trace
                        type: integer
                        format: int128
                      timeOffset:
                        description: Time offset to apply to this trace
                        type: integer
                        format: int64
                      action:
                        description: Action to perform on the given trace (add or remove from the experiment)
                        type: string
                        enum: [add, remove]
                        default: add
                    required:
                      - traceUUID
                      - action
      responses:
        200:
          description: The Experiment was successfully modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
    delete:
      tags:
      - Experiments
      summary: Remove an Experiment from the server.
      operationId: deleteExperiment
      parameters:
      - name: expUUID
        in: path
        description: The unique identifier of the experiment in the server
        required: true
        schema:
          type : integer
          format: int128
      responses:
        200:
          description: The trace was successfully deleted, return the deleted experiment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
        204:
          description: There was no experiment with this name to close / delete
  /experiments/{expUUID}/outputs:
    get:
      tags:
      - Experiments
      summary: Get the list of outputs for this experiment
      operationId: getOutputs
      parameters:
      - name: expUUID
        in: path
        description: The unique identifier of the experiment in the server
        required: true
        schema:
          type : integer
          format: int128
      responses:
        200:
          description: Returns a list of output provider descriptors
          content:
            application/json:
              schema:
                type: object
                properties:
                  experiment:
                    $ref: '#/components/schemas/Experiment'
                  providers:
                    type: array
                    items:
                      $ref: '#/components/schemas/OutputDescriptor'
        404:
          description: No such trace
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/bookmarks:
    get:
      summary: Get the collection of bookmarks for an experiment.
      operationId: getExperimentBookmarks
      tags:
      - Bookmarks
      parameters:
      - name: expUUID
        in: path
        description: The UUID of the experiment in the server
        required: true
        schema:
          type : integer
          format: int128
      responses:
        200:
          description: Returns a list of bookmarks for this trace
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bookmark'
        404:
          description: No such experiment
          content:
            application/json:
              schema:
                type: string
    post:
      summary: Add a bookmark to an experiment.
      operationId: postExperimentBookmark
      tags:
      - Bookmarks
      parameters:
      - name: expUUID
        in: path
        description: The UUID of the experiment in the server
        required: true
        schema:
          type : integer
          format: int128
      requestBody:
        description: The bookmark to post
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Bookmark'         
      responses:
        200:
          description: Returns the boomark's Id
          content:
            application/json:
              schema:
                type: integer
        404:
          description: No such trace
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/bookmarks/{bookmarkId}:
    get:
      summary: Get a specific bookmark from this experiment
      operationId: getExperimentBookmark
      tags:
      - Bookmarks
      parameters:
      - name: expUUID
        in: path
        description: The UUID of the experiment in the server
        required: true
        schema:
          type : integer
          format: int128
      - name: bookmarkId
        in: path
        description: The unique identifier of the bookmark to get
        required: true
        schema:
          type: integer
          format: int128
      responses:
        200:
          description: Returns the queried bookmark
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
        404:
          description: No such experiment / No such bookmark
          content:
            application/json:
              schema:
                type: string
    put:
      summary: Modify a bookmark
      operationId: putExperimentBookmark
      tags:
      - Bookmarks
      parameters:
      - name: expUUID
        in: path
        description: The UUID of the experiment in the server
        required: true
        schema:
          type: integer
          format: int128
      - name: bookmarkId
        in: path
        description: The unique identifier of the bookmark to modify
        required: true
        schema:
          type: string
      requestBody:
        description: The bookmark to update
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Bookmark' 
      responses:
        200:
          description: Returns the boomark's Id
          content:
            application/json:
              schema:
                type: integer
        404:
          description: No such trace
          content:
            application/json:
              schema:
                type: string
    delete:
      summary: Delete a bookmark
      operationId: deleteExperimentBookmark
      tags:
      - Bookmarks
      parameters:
      - name: expUUID
        in: path
        description: The UUID of the experiment in the server
        required: true
        schema:
          type: integer
          format: int128
      - name: bookmarkId
        in: path
        description: The unique identifier of the bookmark to delete
        required: true
        schema:
          type: integer
          format: int128
      responses:
        200:
          description: Returns the deleted boomark
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
        404:
          description: No such trace or bookmark
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/XY/{outputID}/tree:
    post:
      tags:
      - XY
      summary: Tentative API for the XY models.
      description: Unique entry point for output providers,
        to get the tree of visible entries
      operationId: getXYEntry
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type : integer
          format: int128
      - name: outputID
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: Query parameters to fetch the XY tree.
          Usually contains these parameters, but not limited to
          - lowIndex, starting index for the tree
          - size, number of entries to return
          - startTime
          - endTime
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: Returns a list of XY entries. The returned model must be consistent, parentIds must refer to a parent which exists in the model.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GenericResponse'
                  - type: object
                    properties:
                      model:
                        $ref: '#/components/schemas/EntryModel'
        404:
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/XY/{outputID}/xy:
    post:
      tags:
      - XY
      summary: Tentative API for the XY models
      description: Unique endpoint for all xy models,
        ensures that the same template is followed for all endpoints.
      operationId: getXY
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type : integer
          format: int128
      - name: outputID
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: Query parameters to fetch the XY model.
          Usually contains these parameters, but not limited to
          - entries, array of all the entry (series) IDs
          - nb, number of data points to sample
          - startTime
          - endTime
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: Return the queried XYResponse
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GenericResponse'
                  - type: object
                    properties:
                      model:
                        $ref: '#/components/schemas/XYModel'
        404:
          description: Trace not found
          content:
            application/json:
              schema:
                type: string
        405:
          description: Analysis not possible for this trace
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/XY/{outputID}/tooltip:
    get:
      tags:
      - XY
      summary: Tentative API for XY views tooltips.
      description: Endpoint to retreive tooltips for XY
      operationId: getXYTooltip
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type : integer
          format: int128
      - name: outputID
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      - name: xValue
        in: query
        description: X value to use to fetch the tooltip
        required: true
        schema:
          type: integer
          format: int64
      - name: yValue
        in: query
        description: Additional Y value to identify the right tooltip.
          If two points have the same X value and no Y value is provided, the tooltip will include data for all the points.
        required: false
        schema:
          type: integer
          format: int64
      - name: entryID
        in: query
        description: Series ID (entry ID) to give the appropriate for a given series, a global tooltip is returned if absent.
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Returns a list of tooltip keys to values
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                    value:
                      type: string
        404:
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/timeGraph/{outputID}/tree:
    post:
      tags:
      - TimeGraph
      summary: Tentative API for Time Graph models.
      description: Unique entry point for output providers,
        to get the tree of visible entries
      operationId: getTimeGraphEntry
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type : integer
          format: int128
      - name: outputID
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: Query parameters to fetch the timegraph tree.
          Usually contains these parameters, but not limited to
          - lowIndex, starting index for the tree
          - size, number of entries to return
          - startTime
          - endTime
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: Returns a list Time graph entries. The returned model must be consistent, parentIds must refer to a parent which exists in the model.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GenericResponse'
                  - type: object
                    properties:
                      model:
                        allOf:
                          - $ref: '#/components/schemas/EntryModel'
                          - type: object
                            properties:
                              entries:
                                type: array
                                items:
                                  $ref: '#/components/schemas/TimeGraphEntry'
        404:
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/timeGraph/{outputID}/states:
    post:
      tags:
      - TimeGraph
      summary: Tentative API for the TimeGraph views
      operationId: getTimeGraphStates
      description: Unique entry point for all TimeGraph states,
        ensures that the same template is followed for all views
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiement to query
        required: true
        schema:
          type : integer
          format: int128
      - name: outputID
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: Query parameters to fetch the timegraph states.
          Usually contains these parameters, but not limited to
          - entries, array of all the entry (series) IDs
          - nb, number of time stamps to sample
          - startTime
          - endTime
          - labelRatio, ratio of state duration to label's string length to determine if the resolution is large enough to return the label
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: Returns a list of time graph row
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GenericResponse'
                  - type: object
                    properties:
                      model:
                        $ref: '#/components/schemas/TimeGraphModel'
        404:
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/timeGraph/{outputID}/arrows:
    post:
      tags:
      - TimeGraph
      summary: Tentative API for the TimeGraph arrows
      operationId: getTimeGraphArrows
      description: Unique entry point for all TimeGraph models,
        ensures that the same template is followed for all models
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type : integer
          format: int128
      - name: outputID
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: Query parameters to fetch the timegraph arrows.
          Usually contains these parameters, but not limited to
          - startTime
          - endTime
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: Returns a sampled list of TimeGraph arrows
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GenericResponse'
                  - type: object
                    properties:
                      model:
                        type: array
                        items:
                          $ref: '#/components/schemas/TimeGraphArrow'
        404:
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/timeGraph/{outputID}/tooltip:
    get:
      tags:
      - TimeGraph
      summary: Tentative API for Time Graph views tooltips.
      description: Endpoint to retreive tooltips for time graph
      operationId: getTimeGraphTooltip
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type : integer
          format: int128
      - name: outputID
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      - name: time
        in: query
        description: Tooltip's timestamp.
        required: true
        schema:
          type: integer
          format: int64
      - name: entryID
        in: query
        description: Tooltip's entry, a global tooltip is returned if absent.
          Source entry when applied on arrows.
        required: false
        schema:
          type: integer
          format: int64
      - name: targetID
        in: query
        description: Target entry when applied on arrows.
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Returns a list of tooltip keys to values
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                    value:
                      type: string
        404:
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/timeGraph/{outputID}/navigate/states:
    post:
      tags:
      - TimeGraph
      summary: Tentative API for TimeGraph navigation
      operationId: navigateStates
      description: Endpoint to retreive the next / previous corresponding states
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type : integer
          format: int128
      - name: outputID
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      - name: direction
        in: query
        description: Direction of the navigation
        required: true
        schema:
          type: string
          enum: [next, previous]
      requestBody:
        description: Query parameters to fetch the timegraph states.
          Usually contains these parameters, but not limited to
          - entries, array of all the entry (series) IDs
          - nb, number of time stamps to sample
          - startTime
          - endTime
          - labelRatio, ratio of state duration to label's string length to determine if the resolution is large enough to return the label
          - currentTime, Current selected time, starting point of for the next / previous
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: Returns a list of time graph row
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GenericResponse'
                  - type: object
                    properties:
                      desiredTime:
                        type: integer
                        format: int64
                      desiredEntry:
                        type: integer
                        format: int64
                      model:
                        type: array
                        items:
                          $ref: '#/components/schemas/TimeGraphModel'
  /experiments/{expUUID}/outputs/table/{outputID}/columns:
    post:
      tags:
      - Virtual Tables
      summary: Tentative API for events table models.
      description: Unique entry point for output providers, to get the column entries.
      operationId: getEventsTableEntry
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type : integer
          format: int128
      - name: outputID
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: Query parameters to fetch the timegraph tree.
          Usually contains these parameters, but not limited to
          - size, number of entries to return
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: Returns a list of table headers.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GenericResponse'
                type: object
                properties:
                  model:
                    type: array
                    items:
                      $ref: '#/components/schemas/ColumnHeaderEntry'
        404:
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/table/{outputID}/lines:
    post:
      tags:
      - Virtual Tables
      summary: Get a virtual table of the items from a table
      operationId: getLines
      parameters:
      - name: expUUID
        in: path
        description: The UUID of the experiment in the server
        required: true
        schema:
          type : integer
          format: int128
      - name: outputID
        in: path
        description: The name of the table provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: Query parameters to fetch the timegraph tree.
          Usually contains these parameters, but not limited to
          - lowIndex, index of the first line to query
          - size, number of lines to return
          - columnId, List of column ids to return, all columns will be returned if not specified. The data in the returned lines will use the same order as the columnId array
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: Returns a table model with a 2D array of strings and metadata
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GenericResponse'
                  - type: object
                    properties:
                      model:
                        type: array
                        items:
                          $ref: '#/components/schemas/TableModel'
        400:
          description: Bad request, the top index and size must be larger than 0
          content:
            application/json:
              schema:
                type: string
        404:
          description: No such Experiment
          content:
            application/json:
              schema:
                type: string
        500:
          description: Error reading the Experiment
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/{outputID}/style:
    get:
      tags:
      - Style
      summary: Get the style associated to this experiment and output
      operationId: getStyle
      parameters:
      - name: expUUID
        in: path
        description: The UUID of the experiment in the server
        required: true
        schema:
          type : integer
          format: int128
      - name: outputID
        in: path
        description: The name of the output provider to query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Style model that can be use jointly with styleKey to retreive specific style values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StyleModel'
  /filters:
    get:
      summary: Get the list of filters available.
      operationId: getFilters
      tags:
      - Filters
      responses:
        200:
          description: List of filters available.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Filter'
    post:
      summary: Create a new filter.
      operationId: addFilter
      tags:
      - Filters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Human readable label for this filter
                  type: string
                start:
                  description: start time for this filter
                  type: integer
                  format: int64
                end:
                  description: end time for this filter
                  type: integer
                  format: int64
                filterExpression:
                  description: expression from the filter language
                  type: string
                tags:
                  description: Desired tags to apply when an elements pass the filter
                  type: integer
                  format: int32
              required:
                - start
                - end
                - filterExpression
      responses:
        200:
          description: Created filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
  /filters/{filterID}:
    get:
      summary: Get the filter with the given ID.
      operationId: getFilter
      tags:
      - Filters
      parameters:
      - name: filterID
        description: Filter ID
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: The filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
    put:
      summary: Update the given filter.
      operationId: updateFilter
      tags:
      - Filters
      parameters:
      - name: filterID
        description: Filter ID
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Human readable label for this filter
                  type: string
                start:
                  description: start time for this filter
                  type: integer
                  format: int64
                end:
                  description: end time for this filter
                  type: integer
                  format: int64
                filterExpression:
                  description: expression from the filter language
                  type: string
                tags:
                  description: Desired tags to apply when an elements pass the filter
                  type: integer
                  format: int32
      responses:
        200:
          description: The filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
    delete:
      summary: Delete the given filter
      operationId: deleteFilter
      tags:
      - Filters
      parameters:
      - name: filterID
        description: Filter ID
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: The deleted filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        204:
          description: There was no filter with this ID to delete
  /symbols/{hostID}/{PID}:
    post:
      tags:
      - Symbols
      summary: Import/Upload a symbol provider.
      operationId: addSymbolProvider
      parameters:
      - name: hostID
        in: path
        description: Host ID for the symbol provider
        required: true
        schema:
          type: string
      - name: PID
        in: path
        description: PID for the symbol provider
        required: true
        schema:
          type: string
      requestBody:
        description: URL to the symbol provider, not required if the symbol provider is uploaded directly to the endpoint.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  description: URL to the symbol provider, not required if the symbol provider is uploaded directly to the endpoint.
                  type: string
      responses:
        200:
          description: The symbol provider has been successfully added to the trace server.
        406:
          description: "Not acceptable: cannot read this symbol provider type"
    get:
      tags:
      - Symbols
      summary: Gets the symbol providers
      operationId: getSymbols
      parameters:
      - name: hostID
        in: path
        description: The host's ID
        required: true
        schema:
          type: string
      - name: PID
        in: path
        description: Process ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns the Symbol providers for this query.
        404:
          description: No such Host, Thread and address combination.
  /about/traceTypes:
    get:
      summary: Get the list of trace types supported by this server.
      operationId: getTraceTypes
      tags:
      - Features
      responses:
        200:
          description: List of the trace types supported by this server.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      description: The unique identifier for this trace type
                      type: string
                    description:
                      description: Human readable description of this trace type
                      type: string
                    versions:
                      description: List supported versions
                      type: array
                      items:
                        type: string
  /about/outputTypes:
    get:
      summary: Get the list of outputs supported by this server.
      tags:
      - Features
      responses:
        200:
          description: List of the output types supported by this server.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      description: The unique identifier for this output provider type
                      type: string
                    description:
                      description: Human readable description of this output type
                      type: string
                    versions:
                      description: List supported versions
                      type: array
                      items:
                        type: string
components:
  schemas:
    TraceModel:
      type: object
      properties:
        name:
          description: User defined name for the trace
          type: string
        UUID:
          description: The trace's unique identifier
          type : integer
          format: int128
        path:
          description: Path to the trace on the file server's File System
          type: string
        nbEvents:
          description: Current number of indexed events in the trace.
          type: integer
          format: int64
        startTime:
          description: The trace's start time
          type: integer
          format: int64
        endTime:
          description: The trace's end time
          type: integer
          format: int64
        indexingStatus:
          description: Status of the trace indexing Process
          type: string
    Experiment:
      type: object
      properties:
        name:
          description: User defined name for the experiment
          type: string
        UUID:
          description: The experiment's unique identifier
          type : integer
          format: int128
        nbEvents:
          description: Current number of indexed events in the experiment.
          type: integer
          format: int64
        startTime:
          description: The experiment's start time
          type: integer
          format: int64
        endTime:
          description: The experiment's end time
          type: integer
          format: int64
        indexingStatus:
          description: Status of the experiment indexing Process
          type: string
        traces:
          description: The traces encapsulated by this experiment
          type: array
          items:
            $ref: '#/components/schemas/TraceModel'
    Bookmark:
      type: object
      properties:
        start:
          description: the start time for this bookmark.
          type: integer
          format: int64
        end:
          description: the end time for this bookmark.
          type: integer
          format: int64
        name:
          description: this bookmark's name
          type: string
        type:
          description: The type of the bookmark (generic, output, ...)
          type: string
        iconUrl:
          description: URL to the bookmark's icon
          type: string
        UUID:
          description: The bookmark's unique ID, generated by the server.
          type: integer
          format: int128
    OutputDescriptor:
      type: object
      properties:
        id:
          description: The output provider's ID
          type: string
        name:
          description: The human readable name
          type: string
        description:
          description: Describe the output provider's features
          type: string
        outputType:
          description: Type of data returned by this output. Serve as a hint to determine what kind of view should be use for this output (ex. XY, Time Graph, Table, etc..). Providers of type TREE_TIME_XY and TIME_GRAPH can be grouped under the same time axis.
          type: string
          enum:
            - TABLE
            - TREE_TIME_XY
            - TIME_GRAPH
        queryParameters:
          description: List all the possible paramaters that can be use to query this output.
          type: object
          additionalProperties:
            type: object
        start:
          description: The start time of the output model
          type: integer
          format: int64
        end:
          description: The end time of the output model
          type: integer
          format: int64
        final:
          description: If the start, end times and current model are final, or if they will need to be refreshed later to represent a more up to date version.
          type: boolean
        compatibleProviders:
          description: List of IDs of compatible outputs that can be used in the same view (ex. as overlay)
          type: array
          items:
            type: string
    TableModel:
      type: object
      properties:
        lowIndex:
          description: Rank of the first returned event
          type: integer
          format: int64
        size:
          description: Number of events. If filtered, the size will be the number of events that match the filters
          type: integer
          format: int32
        columnId:
          type: array
          items:
            type: integer
            format: int64
        lines:
          type: array
          items:
            $ref: '#/components/schemas/LineModel'
    LineModel:
      type: object
      properties:
        index:
          type: integer
          format: int64
        cells:
          type: array
          items:
            type: object
            properties:
              content:
                description: Content of the cell for this line. The content uses markdown to format the text
                type: string
              tags:
                description: Specific tags for this cell
                type: integer
                format: int32
        tags:
          description: Tags for the entire line
          type: integer
          format: int32
    ColumnHeaderEntry:
      type: object
      properties:
        id:
          description: Unique id to identify this column in the backend.
          type: integer
          format: int32
        name:
          description: Displayed name for this column
          type: string
        columnDescription:
          description: Description of the column
          type: string
        columnType:
          description: Type of data associated to this column
          type: string
    EntryHeader:
      type: object
      properties:
        name:
          description: Displayed name for this header
          type: string
    XYModel:
      type: object
      properties:
        title:
          description: Title of the model
          type: string
        commonXAxis:
          description: Indicate if the model use a common X axis
          type: boolean
        series:
          description: Map of XY series
          type: object
          additionalProperties:
            $ref: '#/components/schemas/XYSeries'
    XYSeries:
      type: object
      properties:
        seriesName:
          description: series' name
          type: string
        seriesID:
          description: series' ID
          type: string
        xAxis:
          $ref: '#/components/schemas/XYAxis'
        yAxis:
          $ref: '#/components/schemas/XYAxis'
        xValues:
          description: series' X values
          type: array
          items:
            type: integer
            format: int64
        yValues:
          description: series' Y values
          type: array
          items:
            type: number
            format: double
        tags:
          description: Array of tags for each xy values
          type: array
          items:
            type: integer
            format: int32
    XYAxis:
      type: object
      properties:
        label:
          description: Label to apply to the axis
          type: string
        unit:
          description: Type of units used for this axis
          type: string
    TimeGraphModel:
      type: object
      properties:
        rows:
          type: array
          items:
            $ref: '#/components/schemas/TimeGraphRow'
    TimeGraphEntry:
      allOf:
        - $ref: '#/components/schemas/Entry'
        - type: object
          properties:
            start:
              description: Beginning of the range for which this entry exists
              type: integer
              format: int64
            end:
              description: End of the range for which this entry exists
              type: integer
              format: int64
    TimeGraphState:
      type: object
      properties:
        start:
          description: start time for this state
          type: integer
          format: int64
        end:
          description: end time for this state
          type: integer
          format: int64
        label:
          description: Text label to apply to this TimeGraphState if resolution permits.
            Optional, no label is applied if absent.
          type: string
        tags:
          description: Tags to apply on this states
          type: integer
          format: int32
        styleKey:
          description: optional key to search for the style of this state. The style map can be obtained by using the style endpoint.
          type: string
    TimeGraphRow:
      type: object
      properties:
        id:
          description: The entry to map this state list to
          type: integer
          format: int64
        states:
          description: List of the time graph entry states associated to this entry and zoom level.
          type: array
          items:
            $ref: '#/components/schemas/TimeGraphState'
    TimeGraphArrow:
      type: object
      properties:
        start:
          description: start time for this arrow
          type: integer
          format: int64
        end:
          description: end time for this arrow
          type: integer
          format: int64
        sourceId:
          description: Source entry's unique ID
          type: integer
          format: int64
        targetId:
          description: Target entry's unique ID
          type: integer
          format: int64
        styleKey:
          description: optional key to search for the style of this arrow. The style map can be obtained by using the style endpoint.
          type: string
    Filter:
      type: object
      properties:
        id:
          description: Unique id to identify this entry in the backend.
          type: integer
          format: int32
        name:
          description: Human readable label for this filter
          type: string
        start:
          description: start time for this filter
          type: integer
          format: int64
        end:
          description: end time for this filter
          type: integer
          format: int64
        expression:
          description: expression from the filter language
          type: string
        tags:
          description: Tags to be applied on elements that pass this filter
          type: integer
          format: int32
    Query:
      description: Describes the parameter used in a request.
        A query contains all the parameters that need to be pass for a specific output. Parameters can be found in the output descriptor.
        It also contains a list of filters to be applied on a specific output. The output response will contain only elements that pass these filters.
      type: object
      properties:
        parameters:
          description: Map of all the parameters used for a specific output
          type: object
          additionalProperties:
            type: object
        filters:
          description: List of filter IDs to apply
          type: array
          items: 
            type: integer
            format: int32
      required:
              - parameters
    ResponseStatus:
      description: All possible status for a server response
      type: string
      enum:
        - RUNNING
        - COMPLETED
        - FAILED
        - CANCELLED
    GenericResponse:
      description: Generic response that include an output descriptor, the status and a status message
      type: object
      properties:
        output:
          $ref: '#/components/schemas/OutputDescriptor'
        status:
          $ref: '#/components/schemas/ResponseStatus'
        statusMessage:
          type: string
    Entry:
      description: Base entry returned by tree endpoints
      type: object
      properties:
        name:
          description: Displayed name for this Entry
          type: array
          items:
            type: string
        id:
          description: Unique id to identify this entry in the backend
          type: integer
          format: int32
        parentId:
          description: Unique id to identify this parent's entry,
            optional if this entry does not have a parent.
          type: integer
          format: int32
    EntryModel:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/Entry'
        headers:
          type: array
          items:
            $ref: '#/components/schemas/EntryHeader'
    StyleValue:
      type: object
      properties:
        bgColor:
          type: string
        fgColor:
          type: string
        height:
          type: integer
          format: int32
        font:
          type: string
        fontColor:
          type: string
      additionalProperties:
        description: Additional properties can be used to add more style key for a specific output (ex. arrowHead, icons, ...)
        type: object
    StyleModel:
      type: object
      description: Map of style specific to an output where values gives hints on the style (ex. time graph state)
      additionalProperties:
        $ref: '#/components/schemas/StyleValue'
