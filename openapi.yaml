###############################################################################
# Copyright (c) 2018, 2021 Ericsson
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################
openapi: 3.0.1
info:
  title: Trace Server Protocol
  description: "Open source REST API for viewing and analyzing any type of logs or\
    \ traces. Its goal is to provide models to populate views, graphs, metrics, and\
    \ more to help extract useful information from traces, in a way that is more user-friendly\
    \ and informative than huge text dumps."
  termsOfService: https://www.eclipse.org/tracecompass/
  contact:
    email: tracecompass-dev@eclipse.org
  license:
    name: Apache 2
    url: http://www.apache.org/licenses/
  version: 0.1.0
servers:
- url: https://localhost:8080/tsp/api
  variables: {}
tags:
- name: Annotations
  description: Retrieve annotations for different outputs.
- name: Bookmarks
  description: How to bookmark areas of interest in the trace.
- name: Diagnostic
  description: Refer to the server's status.
- name: Data Tree
  description: Learn about querying generic data tree models.
- name: Experiments
  description: "How to manage experiments on your server; an experiment represents\
    \ a collection of traces, which can produce output models."
- name: Features
  description: Discover the features which are available on a given server.
- name: Filters
  description: How to filter and query.
- name: Styles
  description: Retrieve styles for different outputs.
- name: TimeGraph
  description: Learn about querying Time Graph models.
- name: Traces
  description: How to manage physical traces on your server.
- name: Virtual Tables
  description: Learn about querying virtual table models (e.g. Events Table).
- name: XML
  description: Learn about querying XML analyses.
- name: XY
  description: Learn about querying XY models.
paths:
  /experiments/{expUUID}/outputs/{outputId}/annotations:
    get:
      tags:
      - Annotations
      summary: API to get annotation categories associated to this experiment and
        output
      operationId: getAnnotationCategories
      parameters:
      - name: expUUID
        in: path
        description: The UUID of the experiment in the server
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: The name of the output provider to query
        required: true
        schema:
          type: string
      - name: markerSetId
        in: query
        description: The optional requested marker set's id
        schema:
          type: string
      responses:
        "200":
          description: Annotation categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IAnnotationCategoriesResponse'
    post:
      tags:
      - Annotations
      summary: API to get the annotations associated to this experiment and output
      operationId: getAnnotations
      parameters:
      - name: expUUID
        in: path
        description: The UUID of the experiment in the server
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: The name of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: "Query parameters to fetch the annotations. The array 'requested_times'\
          \ is the explicit array of requested sample times. The array 'requested_items'\
          \ is the list of entryId being requested. The string 'requested_marker_set'\
          \ is the optional requested marker set's id. The array 'requested_marker_categories'\
          \ is the list of requested annotation categories; if absent, all annotations\
          \ are returned."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IQueryParameters'
            example:
              parameters:
                requested_times:
                - 111200000
                - 111300000
                - 111400000
                - 111500000
                requested_items:
                - 1
                - 2
                requested_marker_set: markerSetId
                requested_marker_categories:
                - category1
                - category2
        required: true
      responses:
        "200":
          description: Annotation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IAnnotationResponse'
  /experiments/{expUUID}/outputs/timeGraph/{outputId}/arrows:
    post:
      tags:
      - TimeGraph
      operationId: getArrows
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryParameters'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments/{expUUID}/outputs/table/{outputId}/columns:
    post:
      tags:
      - Virtual Tables
      operationId: getColumns
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryParameters'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments/{expUUID}/outputs/table/{outputId}/lines:
    post:
      tags:
      - Virtual Tables
      operationId: getLines
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryParameters'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments/{expUUID}/outputs/markerSets:
    get:
      tags:
      - Annotations
      summary: API to get marker sets available for this experiment
      operationId: getMarkerSets
      parameters:
      - name: expUUID
        in: path
        description: The UUID of the experiment in the server
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: List of marker sets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IMarkerSetsResponse'
  /experiments/{expUUID}/outputs/{outputId}:
    get:
      tags:
      - Experiments
      operationId: getProvider
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments/{expUUID}/outputs:
    get:
      tags:
      - Experiments
      operationId: getOutputs
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments/{expUUID}/outputs/timeGraph/{outputId}/states:
    post:
      tags:
      - TimeGraph
      operationId: getStates
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryParameters'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments/{expUUID}/outputs/{outputId}/style:
    post:
      tags:
      - Styles
      operationId: getStyles
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryParameters'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments/{expUUID}/outputs/timeGraph/{outputId}/tooltip:
    post:
      tags:
      - TimeGraph
      operationId: getTimeGraphTooltip
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/QueryParameters'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments/{expUUID}/outputs/timeGraph/{outputId}/tree:
    post:
      tags:
      - TimeGraph
      operationId: getTimeGraphTree
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryParameters'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments/{expUUID}/outputs/XY/{outputId}/xy:
    post:
      tags:
      - XY
      operationId: getXY
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryParameters'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments/{expUUID}/outputs/XY/{outputId}/tooltip:
    get:
      tags:
      - XY
      operationId: getXYTooltip
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        required: true
        schema:
          type: string
      - name: xValue
        in: query
        schema:
          type: integer
          format: int64
      - name: yValue
        in: query
        schema:
          type: integer
          format: int64
      - name: entryId
        in: query
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments/{expUUID}/outputs/XY/{outputId}/tree:
    post:
      tags:
      - XY
      operationId: getXYTree
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryParameters'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments/{expUUID}:
    get:
      tags:
      - Experiments
      operationId: getExperiment
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - Experiments
      operationId: deleteExperiment
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments:
    get:
      tags:
      - Experiments
      operationId: getExperiments
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      tags:
      - Experiments
      operationId: postExperiment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryParameters'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /filters:
    get:
      tags:
      - Filters
      operationId: getFilters
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      tags:
      - Filters
      operationId: createFilter
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /filters/{filterId}:
    get:
      tags:
      - Filters
      operationId: getFilter
      parameters:
      - name: filterId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      tags:
      - Filters
      operationId: updateFilter
      parameters:
      - name: filterId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - Filters
      operationId: deleteFilter
      parameters:
      - name: filterId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /health:
    get:
      tags:
      - Diagnostic
      operationId: getHealthStatus
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /traces/{uuid}:
    get:
      tags:
      - Traces
      operationId: getTrace
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - Traces
      operationId: deleteTrace
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /traces:
    get:
      tags:
      - Traces
      operationId: getTraces
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      tags:
      - Traces
      operationId: putTrace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryParameters'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /xml/{name}:
    delete:
      tags:
      - XML
      operationId: deleteXml
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /xml:
    get:
      tags:
      - XML
      operationId: getXml
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      tags:
      - XML
      operationId: putXml
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                path:
                  type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    post:
      tags:
      - XML
      operationId: postXml
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                path:
                  type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
components:
  schemas:
    IAnnotationCategoriesModel:
      type: object
      properties:
        annotationCategories:
          type: array
          description: Array of all the categories
          items:
            type: string
      description: Model returned by outputs that contains annotation categories available
        for this output
    IAnnotationCategoriesResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            $ref: '#/components/schemas/IAnnotationCategoriesModel'
    IGenericResponse:
      type: object
      properties:
        statusMessage:
          type: string
        status:
          type: string
          description: All possible statuses for a server response
          enum:
          - RUNNING
          - COMPLETED
          - FAILED
          - CANCELLED
      description: Response that includes the status and a status message
    IAnnotation:
      required:
      - duration
      - entryId
      - time
      - type
      type: object
      properties:
        entryId:
          type: integer
          description: Entry's unique ID or -1 if annotation not associated with an
            entry
          format: int64
        style:
          $ref: '#/components/schemas/IOutputElementStyle'
        label:
          type: string
          description: Text label of this annotation
        type:
          type: string
          description: Type of annotation indicating its location
          enum:
          - CHART
          - TREE
        duration:
          type: integer
          description: Duration of this annotation
          format: int64
        time:
          type: integer
          description: Time of this annotation
          format: int64
      description: An annotation is used to mark an interesting area at a given time
        or time range
    IAnnotationModel:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: array
            description: Map of annotations where the keys are categories
            items:
              $ref: '#/components/schemas/IAnnotation'
          description: Map of annotations where the keys are categories
      description: Model returned by outputs that contains annotations per category
    IAnnotationResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            $ref: '#/components/schemas/IAnnotationModel'
    IOutputElementStyle:
      type: object
      properties:
        parentKey:
          type: string
          description: "Parent style key or empty if there is no parent. The parent\
            \ key should match a style key defined in the style model and is used\
            \ for style inheritance. A comma-delimited list of parent style keys can\
            \ be used for style composition, the last one taking precedence."
        styleValues:
          type: object
          additionalProperties:
            type: object
            description: Style values or empty map if there are no values. Keys and
              values are defined in https://git.eclipse.org/r/plugins/gitiles/tracecompass/org.eclipse.tracecompass/+/refs/heads/master/tmf/org.eclipse.tracecompass.tmf.core/src/org/eclipse/tracecompass/tmf/core/model/StyleProperties.java
          description: Style values or empty map if there are no values. Keys and
            values are defined in https://git.eclipse.org/r/plugins/gitiles/tracecompass/org.eclipse.tracecompass/+/refs/heads/master/tmf/org.eclipse.tracecompass.tmf.core/src/org/eclipse/tracecompass/tmf/core/model/StyleProperties.java
      description: "Represents the style on an element (ex. Entry, TimeGraphState,\
        \ ...) returned by any output. Supports style inheritance. To avoid having\
        \ too many styles, the element style can have a parent style and will have\
        \ all the same style property values as the parent, and can add or override\
        \ style properties."
    Filter:
      type: object
      properties:
        startTime:
          type: integer
          format: int64
        expression:
          type: string
        tags:
          type: integer
          format: int32
        endTime:
          type: integer
          format: int64
        name:
          type: string
        id:
          type: integer
          format: int64
    QueryParameters:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            type: object
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
    IParameters:
      required:
      - requested_times
      type: object
      properties:
        requested_times:
          type: array
          items:
            type: integer
            format: int64
        requested_items:
          type: array
          items:
            type: integer
            format: int32
        requested_marker_set:
          type: string
        requested_marker_categories:
          type: array
          items:
            type: string
    IQueryParameters:
      required:
      - parameters
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/IParameters'
    IMarkerSet:
      type: object
      properties:
        name:
          type: string
          description: Name of this marker set
        id:
          type: string
          description: ID of this marker set
      description: A marker set is used to represent a set of annotations that can
        be fetched
    IMarkerSetsResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            type: array
            items:
              $ref: '#/components/schemas/IMarkerSet'
