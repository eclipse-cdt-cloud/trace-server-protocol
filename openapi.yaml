###############################################################################
# Copyright (c) 2018, 2021 Ericsson
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################
openapi: 3.0.1
info:
  title: Trace Server Protocol
  description: "Open source REST API for viewing and analyzing any type of logs or\
    \ traces. Its goal is to provide models to populate views, graphs, metrics, and\
    \ more to help extract useful information from traces, in a way that is more user-friendly\
    \ and informative than huge text dumps."
  termsOfService: https://www.eclipse.org/tracecompass/
  contact:
    email: tracecompass-dev@eclipse.org
  license:
    name: Apache 2
    url: http://www.apache.org/licenses/
  version: 0.1.0
servers:
- url: https://localhost:8080/tsp/api
  variables: {}
tags:
- name: Annotations
  description: Retrieve annotations for different outputs.
- name: Diagnostic
  description: Refer to the server's status.
- name: Experiments
  description: "How to manage experiments on your server; an experiment represents\
    \ a collection of traces, which can produce output models."
- name: Styles
  description: Retrieve styles for different outputs.
- name: TimeGraph
  description: Learn about querying Time Graph models.
- name: Traces
  description: How to manage physical traces on your server.
- name: Virtual Tables
  description: Learn about querying virtual table models (e.g. Events Table).
- name: XML
  description: Learn about querying XML analyses.
- name: XY
  description: Learn about querying XY models.
paths:
  /experiments/{expUUID}/outputs/{outputId}/annotations:
    get:
      tags:
      - Annotations
      summary: API to get annotation categories associated to this experiment and
        output
      operationId: getAnnotationCategories
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      - name: markerSetId
        in: query
        description: The optional requested marker set's id
        schema:
          type: string
      responses:
        "200":
          description: Annotation categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IAnnotationCategoriesResponse'
    post:
      tags:
      - Annotations
      summary: API to get the annotations associated to this experiment and output
      operationId: getAnnotations
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: "Query parameters to fetch the annotations. The array 'requested_times'\
          \ is the explicit array of requested sample times. The array 'requested_items'\
          \ is the list of entryId being requested. The string 'requested_marker_set'\
          \ is the optional requested marker set's id. The array 'requested_marker_categories'\
          \ is the list of requested annotation categories; if absent, all annotations\
          \ are returned."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IAnnotationsQueryParameters'
            example:
              parameters:
                requested_times:
                - 111200000
                - 111300000
                - 111400000
                - 111500000
                requested_items:
                - 1
                - 2
                requested_marker_set: markerSetId
                requested_marker_categories:
                - category1
                - category2
        required: true
      responses:
        "200":
          description: Annotation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IAnnotationResponse'
  /experiments/{expUUID}/outputs/timeGraph/{outputId}/arrows:
    post:
      tags:
      - TimeGraph
      summary: API to get the Time Graph arrows
      description: "Unique entry point for all TimeGraph models, ensures that the\
        \ same template is followed for all models"
      operationId: getArrows
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: Query parameters to fetch the timegraph arrows. The array 'requested_times'
          is the explicit array of requested sample times.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IArrowsQueryParameters'
            example:
              parameters:
                requested_times:
                - 111200000
                - 111300000
                - 111400000
                - 111500000
        required: true
      responses:
        "200":
          description: Returns a sampled list of TimeGraph arrows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ITimeGraphArrowsResponse'
        "404":
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/table/{outputId}/columns:
    post:
      tags:
      - Virtual Tables
      summary: API to get table columns
      description: "Unique entry point for output providers, to get the column entries"
      operationId: getColumns
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: Query parameters to fetch the table columns
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IOptionalQueryParameters'
            example:
              parameters: {}
        required: true
      responses:
        "200":
          description: Returns a list of table headers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ITableColumnHeadersResponse'
        "404":
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/table/{outputId}/lines:
    post:
      tags:
      - Virtual Tables
      summary: API to get virtual table lines
      operationId: getLines
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: "Query parameters to fetch the table lines. One of 'requested_table_index'\
          \ or 'requested_times' should be present. If 'requested_table_index' is\
          \ used it is the starting index of the lines to be returned. If 'requested_times'\
          \ is used it should contain an array with a single timestamp. The returned\
          \ lines starting at the given timestamp (or the nearest following) will\
          \ be returned. The 'requested_table_count' is the number of lines that should\
          \ be returned. When 'requested_table_column_ids' is absent all columns are\
          \ returned. When present it is the array of requested columnIds. Use 'table_search_expressions'\
          \ for search providing a map of <columnId, regular expression>. Returned\
          \ lines that match the search expression will be tagged. Use 'table_search_direction'\
          \ to specify search direction [NEXT, PREVIOUS]. If present, 'requested_table_count'\
          \ events are returned starting from the first matching event. Matching and\
          \ not matching events are returned. Matching events will be tagged. If no\
          \ matches are found, an empty list will be returned."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ILinesQueryParameters'
            example:
              parameters:
                requested_table_index: 0
                requested_table_count: 100
                requested_table_column_ids:
                - 0
                - 1
                - 2
                table_search_expressions:
                  "1": cpu.*
                table_search_direction: NEXT
        required: true
      responses:
        "200":
          description: Returns a table model with a 2D array of strings and metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IVirtualTableResponse'
        "400":
          description: "Bad request, the top index and size must be larger than 0"
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Error reading the experiment
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/markerSets:
    get:
      tags:
      - Annotations
      summary: API to get marker sets available for this experiment
      operationId: getMarkerSets
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: List of marker sets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IMarkerSetsResponse'
  /experiments/{expUUID}/outputs/{outputId}:
    get:
      tags:
      - Experiments
      summary: Get the output descriptor for this experiment and output
      operationId: getProvider
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Returns the output provider descriptor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDataProvider'
        "404":
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs:
    get:
      tags:
      - Experiments
      summary: Get the list of outputs for this experiment
      operationId: getProviders
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Returns a list of output provider descriptors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IDataProvider'
        "404":
          description: No such trace
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/timeGraph/{outputId}/states:
    post:
      tags:
      - TimeGraph
      summary: API to get the Time Graph states
      description: "Unique entry point for all TimeGraph states, ensures that the\
        \ same template is followed for all views"
      operationId: getStates
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: Query parameters to fetch the timegraph states. The array 'requested_times'
          is the explicit array of requested sample times. The array 'requested_items'
          is the list of entryId being requested.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IRequestedQueryParameters'
            example:
              parameters:
                requested_times:
                - 111200000
                - 111300000
                - 111400000
                - 111500000
                requested_items:
                - 1
                - 2
        required: true
      responses:
        "200":
          description: Returns a list of time graph rows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ITimeGraphStatesResponse'
        "404":
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/{outputId}/style:
    post:
      tags:
      - Styles
      summary: API to get the style map associated to this experiment and output
      operationId: getStyles
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: Query parameters to fetch the style map
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IOptionalQueryParameters'
            example:
              parameters: {}
        required: true
      responses:
        "200":
          description: Style model that can be used jointly with OutputElementStyle
            to retrieve specific style values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IStylesResponse'
  /experiments/{expUUID}/outputs/timeGraph/{outputId}/tooltip:
    post:
      tags:
      - TimeGraph
      summary: API to get a Time Graph tooltip
      description: Endpoint to retrieve tooltips for time graph
      operationId: getTimeGraphTooltip
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: Query parameters to fetch the timegraph tooltip. The array 'requested_times'
          is an array with a single timestamp. The array 'requested_items' is an array
          with a single entryId being requested.  The object 'requested_element' is
          the element for which the tooltip is requested.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ITooltipQueryParameters'
            example:
              parameters:
                requested_times:
                - 111200000
                requested_items:
                - 1
                requested_element:
                  elementType: state
                  time: 111100000
                  duration: 100000
        required: true
      responses:
        "200":
          description: Returns a list of tooltip keys to values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ITimeGraphTooltipResponse'
        "404":
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/timeGraph/{outputId}/tree:
    post:
      tags:
      - TimeGraph
      summary: API to get the Time Graph tree
      description: "Unique entry point for output providers, to get the tree of visible\
        \ entries"
      operationId: getTimeGraphTree
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: "Query parameters to fetch the timegraph tree. When 'requested_times'\
          \ is absent the tree for the full range is returned. When present it specifies\
          \ a range as [start, end]."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ITreeQueryParameters'
            example:
              parameters:
                requested_times:
                - 111111111
                - 222222222
        required: true
      responses:
        "200":
          description: "Returns a list of Time Graph entries. The returned model must\
            \ be consistent, parentIds must refer to a parent which exists in the\
            \ model."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ITimeGraphTreeResponse'
        "404":
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/XY/{outputId}/xy:
    post:
      tags:
      - XY
      summary: API to get the XY model
      description: "Unique endpoint for all xy models, ensures that the same template\
        \ is followed for all endpoints."
      operationId: getXY
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: Query parameters to fetch the XY model. The array 'requested_times'
          is the explicit array of requested sample times. The array 'requested_items'
          is the list of entryId or seriesId being requested.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IRequestedQueryParameters'
            example:
              parameters:
                requested_times:
                - 111200000
                - 111300000
                - 111400000
                - 111500000
                requested_items:
                - 1
                - 2
        required: true
      responses:
        "200":
          description: Return the queried XYResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IXYResponse'
        "404":
          description: No such trace
          content:
            application/json:
              schema:
                type: string
        "405":
          description: Analysis not possible for this trace
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}/outputs/XY/{outputId}/tree:
    post:
      tags:
      - XY
      summary: API to get the XY tree
      description: "Unique entry point for output providers, to get the tree of visible\
        \ entries"
      operationId: getXYTree
      parameters:
      - name: expUUID
        in: path
        description: UUID of the experiment to query
        required: true
        schema:
          type: string
          format: uuid
      - name: outputId
        in: path
        description: ID of the output provider to query
        required: true
        schema:
          type: string
      requestBody:
        description: "Query parameters to fetch the XY tree. When 'requested_times'\
          \ is absent the tree for the full range is returned. When present it specifies\
          \ a range as [start, end]."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ITreeQueryParameters'
            example:
              parameters:
                requested_times:
                - 111111111
                - 222222222
        required: true
      responses:
        "200":
          description: "Returns a list of XY entries. The returned model must be consistent,\
            \ parentIds must refer to a parent which exists in the model."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IXYTreeResponse'
        "404":
          description: Experiment or output provider not found
          content:
            application/json:
              schema:
                type: string
  /experiments/{expUUID}:
    get:
      tags:
      - Experiments
      operationId: getExperiment
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - Experiments
      operationId: deleteExperiment
      parameters:
      - name: expUUID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /experiments:
    get:
      tags:
      - Experiments
      operationId: getExperiments
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      tags:
      - Experiments
      operationId: postExperiment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryParameters'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /health:
    get:
      tags:
      - Diagnostic
      operationId: getHealthStatus
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /traces/{uuid}:
    get:
      tags:
      - Traces
      operationId: getTrace
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - Traces
      operationId: deleteTrace
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /traces:
    get:
      tags:
      - Traces
      operationId: getTraces
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      tags:
      - Traces
      operationId: putTrace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryParameters'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /xml/{name}:
    delete:
      tags:
      - XML
      operationId: deleteXml
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /xml:
    get:
      tags:
      - XML
      operationId: getXml
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      tags:
      - XML
      operationId: putXml
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                path:
                  type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    post:
      tags:
      - XML
      operationId: postXml
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                path:
                  type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
components:
  schemas:
    IAnnotationCategoriesModel:
      type: object
      properties:
        annotationCategories:
          type: array
          description: Array of all the categories
          items:
            type: string
      description: Model returned by outputs that contains annotation categories available
        for this output
    IAnnotationCategoriesResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            $ref: '#/components/schemas/IAnnotationCategoriesModel'
    IGenericResponse:
      type: object
      properties:
        statusMessage:
          type: string
        status:
          type: string
          description: All possible statuses for a server response
          enum:
          - RUNNING
          - COMPLETED
          - FAILED
          - CANCELLED
      description: Response that includes the status and a status message
    IAnnotation:
      required:
      - duration
      - entryId
      - time
      - type
      type: object
      properties:
        entryId:
          type: integer
          description: Entry's unique ID or -1 if annotation not associated with an
            entry
          format: int64
        style:
          $ref: '#/components/schemas/IOutputElementStyle'
        label:
          type: string
          description: Text label of this annotation
        type:
          type: string
          description: Type of annotation indicating its location
          enum:
          - CHART
          - TREE
        duration:
          type: integer
          description: Duration of this annotation
          format: int64
        time:
          type: integer
          description: Time of this annotation
          format: int64
      description: An annotation is used to mark an interesting area at a given time
        or time range
    IAnnotationModel:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: array
            description: Map of annotations where the keys are categories
            items:
              $ref: '#/components/schemas/IAnnotation'
          description: Map of annotations where the keys are categories
      description: Model returned by outputs that contains annotations per category
    IAnnotationResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            $ref: '#/components/schemas/IAnnotationModel'
    IOutputElementStyle:
      type: object
      properties:
        parentKey:
          type: string
          description: "Parent style key or empty if there is no parent. The parent\
            \ key should match a style key defined in the style model and is used\
            \ for style inheritance. A comma-delimited list of parent style keys can\
            \ be used for style composition, the last one taking precedence."
        values:
          type: object
          additionalProperties:
            type: object
            description: Style values or empty map if there are no values. Keys and
              values are defined in https://git.eclipse.org/r/plugins/gitiles/tracecompass/org.eclipse.tracecompass/+/refs/heads/master/tmf/org.eclipse.tracecompass.tmf.core/src/org/eclipse/tracecompass/tmf/core/model/StyleProperties.java
          description: Style values or empty map if there are no values. Keys and
            values are defined in https://git.eclipse.org/r/plugins/gitiles/tracecompass/org.eclipse.tracecompass/+/refs/heads/master/tmf/org.eclipse.tracecompass.tmf.core/src/org/eclipse/tracecompass/tmf/core/model/StyleProperties.java
      description: "Represents the style on an element (ex. Entry, TimeGraphState,\
        \ ...) returned by any output. Supports style inheritance. To avoid having\
        \ too many styles, the element style can have a parent style and will have\
        \ all the same style property values as the parent, and can add or override\
        \ style properties."
    Filter:
      type: object
      properties:
        startTime:
          type: integer
          format: int64
        expression:
          type: string
        tags:
          type: integer
          format: int32
        endTime:
          type: integer
          format: int64
        name:
          type: string
        id:
          type: integer
          format: int64
    QueryParameters:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            type: object
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
    IAnnotationsParameters:
      required:
      - requested_times
      type: object
      properties:
        requested_times:
          type: array
          items:
            type: integer
            format: int64
        requested_items:
          type: array
          items:
            type: integer
            format: int32
        requested_marker_set:
          type: string
        requested_marker_categories:
          type: array
          items:
            type: string
    IAnnotationsQueryParameters:
      required:
      - parameters
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/IAnnotationsParameters'
    ITimeGraphArrow:
      required:
      - targetId
      - end
      - sourceId
      - start
      type: object
      properties:
        start:
          type: integer
          description: Start time for this arrow
          format: int64
        sourceId:
          type: integer
          description: Source entry's unique ID
          format: int64
        targetId:
          type: integer
          description: Target entry's unique ID
          format: int64
        style:
          $ref: '#/components/schemas/IOutputElementStyle'
        end:
          type: integer
          description: End time for this arrow
          format: int64
    ITimeGraphArrowsResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            type: array
            items:
              $ref: '#/components/schemas/ITimeGraphArrow'
    IArrowsParameters:
      required:
      - requested_times
      type: object
      properties:
        requested_times:
          type: array
          items:
            type: integer
            format: int64
    IArrowsQueryParameters:
      required:
      - parameters
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/IArrowsParameters'
    ITableColumnHeader:
      type: object
      properties:
        description:
          type: string
          description: Description of the column
        name:
          type: string
          description: Displayed name for this column
        id:
          type: integer
          description: Unique id to identify this column in the backend
          format: int64
        type:
          type: string
          description: Type of data associated to this column
    ITableColumnHeadersResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            type: array
            items:
              $ref: '#/components/schemas/ITableColumnHeader'
    IOptionalParameters:
      type: object
    IOptionalQueryParameters:
      required:
      - parameters
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/IOptionalParameters'
    IVirtualTableCell:
      type: object
      properties:
        tags:
          type: integer
          description: Specific tags for this cell. A value of 0 should be handled
            as none (no tags)
          format: int32
        content:
          type: string
          description: Content of the cell for this line
    IVirtualTableLine:
      type: object
      properties:
        tags:
          type: integer
          description: "Tags for the entire line. A bit mask to apply for tagging\
            \ elements (e.g. table lines, states). This can be used by the server\
            \ to indicate if a filter matches and what action to apply. Use 0 for\
            \ no tags, 1 and 2 are reserved, 4 for 'BORDER' and 8 for 'HIGHLIGHT'."
          format: int32
        cells:
          type: array
          description: The content of the cells for this line. This array matches
            the column ids returned above
          items:
            $ref: '#/components/schemas/IVirtualTableCell'
        index:
          type: integer
          description: The index of this line in the virtual table
          format: int64
    IVirtualTableModel:
      type: object
      properties:
        lowIndex:
          type: integer
          description: Index in the virtual table of the first returned event
          format: int64
        columnIds:
          type: array
          description: The array of column ids that are returned. They should match
            the content of the lines' content
          items:
            type: integer
            format: int64
        lines:
          type: array
          items:
            $ref: '#/components/schemas/IVirtualTableLine'
        size:
          type: integer
          description: "Number of events. If filtered, the size will be the number\
            \ of events that match the filters"
          format: int64
    IVirtualTableResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            $ref: '#/components/schemas/IVirtualTableModel'
    ILinesParameters:
      required:
      - requested_table_count
      type: object
      properties:
        table_search_direction:
          type: string
          description: "Search next or previous item (e.g. event, state etc.)"
          enum:
          - NEXT
          - PREVIOUS
        table_search_expressions:
          type: object
          additionalProperties:
            type: string
        requested_table_column_ids:
          type: array
          items:
            type: integer
            format: int64
        requested_table_count:
          type: integer
          format: int32
        requested_table_index:
          type: integer
          format: int64
        requested_times:
          type: array
          items:
            type: integer
            format: int64
    ILinesQueryParameters:
      required:
      - parameters
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/ILinesParameters'
    IMarkerSet:
      type: object
      properties:
        name:
          type: string
          description: Name of this marker set
        id:
          type: string
          description: ID of this marker set
      description: A marker set is used to represent a set of annotations that can
        be fetched
    IMarkerSetsResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            type: array
            items:
              $ref: '#/components/schemas/IMarkerSet'
    IDataProvider:
      type: object
      properties:
        description:
          type: string
          description: Describes the output provider's features
        name:
          type: string
          description: The human readable name
        id:
          type: string
          description: The output provider's ID
        type:
          type: string
          description: "Type of data returned by this output. Serves as a hint to\
            \ determine what kind of view should be used for this output (ex. XY,\
            \ Time Graph, Table, etc..). Providers of type TREE_TIME_XY and TIME_GRAPH\
            \ can be grouped under the same time axis. Providers of type DATA_TREE\
            \ only provide a tree with columns and don't have any XY nor time graph\
            \ data associated with it."
          enum:
          - TABLE
          - TREE_TIME_XY
          - TIME_GRAPH
          - DATA_TREE
    ITimeGraphModel:
      type: object
      properties:
        rows:
          type: array
          items:
            $ref: '#/components/schemas/ITimeGraphRowModel'
    ITimeGraphRowModel:
      required:
      - entryId
      - states
      type: object
      properties:
        states:
          type: array
          description: List of the time graph entry states associated to this entry
            and zoom level
          items:
            $ref: '#/components/schemas/ITimeGraphState'
        entryId:
          type: integer
          description: The entry to map this state list to
          format: int64
    ITimeGraphState:
      required:
      - end
      - start
      type: object
      properties:
        label:
          type: string
          description: "Text label to apply to this TimeGraphState if resolution permits.\
            \ Optional, no label is applied if absent"
        tags:
          type: integer
          description: Tags to apply on this state. A value of 0 should be handled
            as none (no tags)
          format: int32
        style:
          $ref: '#/components/schemas/IOutputElementStyle'
        start:
          type: integer
          description: Start time for this state
          format: int64
        end:
          type: integer
          description: End time for this state
          format: int64
    ITimeGraphStatesResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            $ref: '#/components/schemas/ITimeGraphModel'
    IRequestedParameters:
      required:
      - requested_items
      - requested_times
      type: object
      properties:
        requested_times:
          type: array
          items:
            type: integer
            format: int64
        requested_items:
          type: array
          items:
            type: integer
            format: int32
    IRequestedQueryParameters:
      required:
      - parameters
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/IRequestedParameters'
    IOutputStyleModel:
      type: object
      properties:
        styles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IOutputElementStyle'
      description: Map of styles specific to an output where values give hints on
        the style. The keys are strings that can be used in OutputElementStyle
    IStylesResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            $ref: '#/components/schemas/IOutputStyleModel'
    ITimeGraphTooltip:
      type: object
      properties:
        value:
          type: string
        key:
          type: string
    ITimeGraphTooltipResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            type: array
            items:
              $ref: '#/components/schemas/ITimeGraphTooltip'
    IElement:
      required:
      - duration
      - elementType
      - time
      type: object
      properties:
        destinationId:
          type: integer
          description: Destination entry's unique ID (arrow)
          format: int64
        entryId:
          type: integer
          description: "Entry's unique ID (annotation, arrow)"
          format: int64
        time:
          type: integer
          description: Element's start time
          format: int64
        elementType:
          type: string
          description: The type of element
          enum:
          - STATE
          - ANNOTATION
          - ARROW
        duration:
          type: integer
          description: Element's duration
          format: int64
      description: An element model to be identified
    ITooltipParameters:
      required:
      - requested_element
      - requested_items
      - requested_times
      type: object
      properties:
        requested_times:
          type: array
          items:
            type: integer
            format: int64
        requested_items:
          type: array
          items:
            type: integer
            format: int32
        requested_element:
          $ref: '#/components/schemas/IElement'
    ITooltipQueryParameters:
      required:
      - parameters
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/ITooltipParameters'
    ITimeGraphEntry:
      type: object
      allOf:
      - $ref: '#/components/schemas/ITreeDataModel'
      - type: object
        properties:
          start:
            type: integer
            description: Beginning of the range for which this entry exists
            format: int64
          end:
            type: integer
            description: End of the range for which this entry exists
            format: int64
    ITimeGraphTreeModel:
      type: object
      allOf:
      - $ref: '#/components/schemas/ITreeEntryModel'
      - type: object
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/ITimeGraphEntry'
    ITimeGraphTreeResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            $ref: '#/components/schemas/ITimeGraphTreeModel'
    ITreeColumnHeader:
      required:
      - name
      type: object
      properties:
        tooltip:
          type: string
          description: "Displayed tooltip for this header. Optional, no tooltip is\
            \ applied if absent."
        name:
          type: string
          description: Displayed name for this header
    ITreeDataModel:
      required:
      - id
      - labels
      type: object
      properties:
        parentId:
          type: integer
          description: "Unique id to identify this parent's entry, optional if this\
            \ entry does not have a parent."
          format: int64
        hasData:
          type: boolean
          description: Whether or not this entry has data
        labels:
          type: array
          description: Array of cell labels to be displayed. The length of the array
            and the index of each column need to correspond to the header array returned
            in the tree model.
          items:
            type: string
        style:
          $ref: '#/components/schemas/IOutputElementStyle'
        id:
          type: integer
          description: Unique id to identify this entry in the backend
          format: int64
      description: Base entry returned by tree endpoints
    ITreeEntryModel:
      required:
      - entries
      type: object
      properties:
        headers:
          type: array
          items:
            $ref: '#/components/schemas/ITreeColumnHeader'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/ITreeDataModel'
    ITreeParameters:
      type: object
      properties:
        requested_times:
          type: array
          items:
            type: integer
            format: int64
    ITreeQueryParameters:
      required:
      - parameters
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/ITreeParameters'
    ISeriesModel:
      required:
      - seriesId
      - seriesName
      - xValues
      - yValues
      type: object
      properties:
        seriesId:
          type: integer
          description: Series' ID
          format: int64
        seriesName:
          type: string
          description: Series' name
        xValues:
          type: array
          description: Series' X values
          items:
            type: integer
            format: int64
        yValues:
          type: array
          description: Series' Y values
          items:
            type: integer
            format: int64
    IXYModel:
      required:
      - series
      - title
      type: object
      properties:
        series:
          type: array
          items:
            $ref: '#/components/schemas/ISeriesModel'
        title:
          type: string
          description: Title of the model
    IXYResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            $ref: '#/components/schemas/IXYModel'
    IXYTreeResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/IGenericResponse'
      - type: object
        properties:
          model:
            $ref: '#/components/schemas/ITreeEntryModel'
